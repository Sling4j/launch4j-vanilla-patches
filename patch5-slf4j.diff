From 67840649763b35da356663a904bc460199301aae Mon Sep 17 00:00:00 2001
From: Lilianne-Blaze <39486911+Lilianne-Blaze@users.noreply.github.com>
Date: Fri, 9 Feb 2024 13:01:52 +0100
Subject: [PATCH] Applied patch4-formatter

---
 formatter-java.xml | 27 +++++++++++++++++++++++++++
 maven/pom.xml      | 18 ++++++++++++++++++
 2 files changed, 45 insertions(+)
 create mode 100644 formatter-java.xml

diff --git a/formatter-java.xml b/formatter-java.xml
new file mode 100644
index 0000000..6970947
--- /dev/null
+++ b/formatter-java.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<profiles version="23">
+    <profile kind="CodeFormatterProfile" name="Java Conventions [mod]" version="23">
+        <setting id="org.eclipse.jdt.core.formatter.indentation.size" value="4"/>
+        <setting id="org.eclipse.jdt.core.formatter.comment.line_length" value="120"/>
+        <setting id="org.eclipse.jdt.core.formatter.join_lines_in_comments" value="false"/>
+        <setting id="org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation" value="80"/>
+        <setting id="org.eclipse.jdt.core.formatter.join_wrapped_lines" value="false"/>
+        <setting id="org.eclipse.jdt.core.formatter.tabulation.size" value="4"/>
+        <setting id="org.eclipse.jdt.core.formatter.tabulation.char" value="tab"/>
+
+        <setting id="org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer" value="16"/>
+        <setting id="org.eclipse.jdt.core.formatter.comment.align_tags_descriptions_grouped" value="false"/>
+        <setting id="org.eclipse.jdt.core.formatter.keep_loop_body_block_on_one_line" value="one_line_if_empty"/>
+        <setting id="org.eclipse.jdt.core.formatter.alignment_for_enum_constants" value="64"/>
+
+        <setting id="org.eclipse.jdt.core.formatter.brace_position_for_array_initializer" value="same_line"/>
+        <setting id="org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer" value="do not insert"/>
+        <setting id="org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line" value="true"/>
+
+        <setting id="org.eclipse.jdt.core.formatter.alignment_for_conditional_expression" value="16"/>
+        <setting id="org.eclipse.jdt.core.formatter.alignment_for_conditional_expression_chain" value="16"/>
+        <setting id="org.eclipse.jdt.core.formatter.wrap_before_conditional_operator" value="false"/>
+
+
+    </profile>
+</profiles>
diff --git a/maven/pom.xml b/maven/pom.xml
index f580481..5f3b595 100644
--- a/maven/pom.xml
+++ b/maven/pom.xml
@@ -155,6 +155,24 @@
 			</resource>
 		</resources>
 		<plugins>
+		
+			<plugin>
+				<groupId>net.revelc.code.formatter</groupId>
+				<artifactId>formatter-maven-plugin</artifactId>
+				<!-- 2.16.0 is the last version supporting Java 8 -->
+				<version>2.16.0</version>
+				<executions>
+					<execution>
+						<goals>
+							<goal>format</goal>
+						</goals>
+					</execution>
+				</executions>
+				<configuration>
+					<configFile>./formatter-java.xml</configFile>
+				</configuration>
+			</plugin>
+			
 			<plugin>
 				<artifactId>maven-compiler-plugin</artifactId>
 				<version>3.8.1</version>
-- 
2.33.0.windows.2

From 777db6f0e7ad5b332ffd8adec46a865e9861f35b Mon Sep 17 00:00:00 2001
From: Lilianne-Blaze <39486911+Lilianne-Blaze@users.noreply.github.com>
Date: Tue, 13 Feb 2024 04:54:16 +0100
Subject: [PATCH] Switched to Slf4j

---
 src/net/sf/launch4j/Builder.java            | 33 ++++++++++----------
 src/net/sf/launch4j/Main.java               |  6 ++--
 src/net/sf/launch4j/Util.java               | 18 +++++++----
 src/net/sf/launch4j/ant/Launch4jTask.java   |  3 +-
 src/net/sf/launch4j/formimpl/MainFrame.java | 34 +++++++++++----------
 5 files changed, 51 insertions(+), 43 deletions(-)

diff --git a/src/net/sf/launch4j/Builder.java b/src/net/sf/launch4j/Builder.java
index 644b7d6..74ba4a6 100644
--- a/src/net/sf/launch4j/Builder.java
+++ b/src/net/sf/launch4j/Builder.java
@@ -43,6 +43,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
+import lombok.extern.slf4j.Slf4j;
 
 import net.sf.launch4j.binding.InvariantViolationException;
 import net.sf.launch4j.config.Config;
@@ -51,17 +52,15 @@ import net.sf.launch4j.config.ConfigPersister;
 /**
  * @author Copyright (C) 2005 Grzegorz Kowal
  */
+@Slf4j
 public class Builder {
-	private final Log _log;
 	private final File _basedir;
 
 	public Builder(Log log) {
-		_log = log;
 		_basedir = Util.getJarBasedir();
 	}
 
 	public Builder(Log log, File basedir) {
-		_log = log;
 		_basedir = basedir;
 	}
 
@@ -83,7 +82,7 @@ public class Builder {
 		final RcBuilder rcb = new RcBuilder();
 		try {
 			if (c.isJniApplication()) {
-				_log.append("WARNING: Some features are not implemented in JNI headers, see documentation.");
+				log.warn("WARNING: Some features are not implemented in JNI headers, see documentation.");
 			}
 
 			rc = rcb.build(c);
@@ -96,8 +95,8 @@ public class Builder {
 					.add("-J rc -O coff -F pe-i386")
 					.addAbsFile(rc)
 					.addAbsFile(ro);
-			_log.append(Messages.getString("Builder.compiling.resources"));
-			resCmd.exec(_log);
+			log.info(Messages.getString("Builder.compiling.resources"));
+			resCmd.exec(null);
 
 			Cmd ldCmd = new Cmd(_basedir);
 			ldCmd.addExe("ld")
@@ -113,11 +112,11 @@ public class Builder {
 					.addFiles(c.getLibs())
 					.add("-o")
 					.addAbsFile(outfile);
-			_log.append(Messages.getString("Builder.linking"));
-			ldCmd.exec(_log);
+			log.info(Messages.getString("Builder.linking"));
+			ldCmd.exec(null);
 
 			if (!c.isDontWrapJar()) {
-				_log.append(Messages.getString("Builder.wrapping"));
+				log.info(Messages.getString("Builder.wrapping"));
 				int len;
 				byte[] buffer = new byte[1024];
 				is = new FileInputStream(Util.getAbsoluteFile(
@@ -127,23 +126,23 @@ public class Builder {
 					os.write(buffer, 0, len);
 				}
 			}
-			_log.append(Messages.getString("Builder.success") + outfile.getPath());
+			log.info(Messages.getString("Builder.success") + outfile.getPath());
 			return outfile;
 		} catch (IOException e) {
 			Util.delete(outfile);
-			_log.append(e.getMessage());
+			log.error(e.getMessage());
 			throw new BuilderException(e);
 		} catch (ExecException e) {
 			Util.delete(outfile);
 			String msg = e.getMessage(); 
 			if (msg != null && msg.indexOf("windres") != -1) {
 				if (e.getErrLine() != -1) {
-					_log.append(Messages.getString("Builder.line.has.errors",
+					log.error(Messages.getString("Builder.line.has.errors",
 							String.valueOf(e.getErrLine())));
-					_log.append(rcb.getLine(e.getErrLine()));
+					log.error(rcb.getLine(e.getErrLine()));
 				} else {
-					_log.append(Messages.getString("Builder.generated.resource.file"));
-					_log.append(rcb.getContent());
+					log.info(Messages.getString("Builder.generated.resource.file"));
+					log.info(rcb.getContent());
 				}
 			}
 			throw new BuilderException(e);
@@ -210,8 +209,8 @@ class Cmd {
 		return this;
 	}
 
-	public void exec(Log log) throws ExecException {
+	public void exec(Log logDeprecated) throws ExecException {
 		String[] cmd = (String[]) _cmd.toArray(new String[_cmd.size()]);
-		Util.exec(cmd, log);
+		Util.exec(cmd, null);
 	}
 }
diff --git a/src/net/sf/launch4j/Main.java b/src/net/sf/launch4j/Main.java
index 3f1232f..97e4ff2 100644
--- a/src/net/sf/launch4j/Main.java
+++ b/src/net/sf/launch4j/Main.java
@@ -38,6 +38,7 @@ package net.sf.launch4j;
 
 import java.io.File;
 import java.util.Properties;
+import lombok.extern.slf4j.Slf4j;
 
 import net.sf.launch4j.config.ConfigPersister;
 import net.sf.launch4j.formimpl.MainFrame;
@@ -45,6 +46,7 @@ import net.sf.launch4j.formimpl.MainFrame;
 /**
  * @author Copyright (C) 2005 Grzegorz Kowal
  */
+@Slf4j
 public class Main {
 	private static String _name; 
 	private static String _description;
@@ -59,7 +61,7 @@ public class Main {
 				MainFrame.createInstance();
 			} else if (args.length == 1 && !args[0].startsWith("-")) {
 				ConfigPersister.getInstance().load(new File(args[0]));
-				Builder b = new Builder(Log.getConsoleLog());
+				Builder b = new Builder(null);
 				b.build();
 			} else {
 				System.out.println(_description
@@ -67,7 +69,7 @@ public class Main {
 						+ ": launch4j config.xml");
 			}
 		} catch (Exception e) {
-			Log.getConsoleLog().append(e.getMessage());
+			log.error(e.getMessage(),e);
 			System.exit(1);
 		} 
 	}
diff --git a/src/net/sf/launch4j/Util.java b/src/net/sf/launch4j/Util.java
index b1006b8..1402224 100644
--- a/src/net/sf/launch4j/Util.java
+++ b/src/net/sf/launch4j/Util.java
@@ -49,10 +49,12 @@ import java.net.URISyntaxException;
 import java.util.Properties;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import lombok.extern.slf4j.Slf4j;
 
 /**
  * @author Copyright (C) 2005 Grzegorz Kowal
  */
+@Slf4j
 public class Util {
 	public static final boolean WINDOWS_OS = System.getProperty("os.name")
 			.toLowerCase().startsWith("windows");
@@ -117,7 +119,7 @@ public class Util {
 		}
 	}
 
-	public static void exec(String[] cmd, Log log) throws ExecException {
+	public static void exec(String[] cmd, Log logDeprecated) throws ExecException {
 		BufferedReader is = null;
 		try {
 			if (WINDOWS_OS) {
@@ -131,7 +133,7 @@ public class Util {
 			int errLine = -1;
 			Pattern pattern = Pattern.compile(":\\d+:");
 			while ((line = is.readLine()) != null) {
-				log.append(line);
+				log.info(line);
 				Matcher matcher = pattern.matcher(line);
 				if (matcher.find()) {
 					errLine = Integer.valueOf(
@@ -179,7 +181,8 @@ public class Util {
 			try {
 				o.close();
 			} catch (IOException e) {
-				System.err.println(e); // XXX log
+				//System.err.println(e); // XXX log
+				log.error(e.getMessage());
 			}
 		}
 	}
@@ -189,7 +192,8 @@ public class Util {
 			try {
 				o.close();
 			} catch (IOException e) {
-				System.err.println(e); // XXX log
+				//System.err.println(e); // XXX log
+				log.error(e.getMessage());
 			}
 		}
 	}
@@ -199,7 +203,8 @@ public class Util {
 			try {
 				o.close();
 			} catch (IOException e) {
-				System.err.println(e); // XXX log
+				//System.err.println(e); // XXX log
+				log.error(e.getMessage());
 			}
 		}
 	}
@@ -209,7 +214,8 @@ public class Util {
 			try {
 				o.close();
 			} catch (IOException e) {
-				System.err.println(e); // XXX log
+//				System.err.println(e); // XXX log
+				log.error(e.getMessage());
 			}
 		}
 	}
diff --git a/src/net/sf/launch4j/ant/Launch4jTask.java b/src/net/sf/launch4j/ant/Launch4jTask.java
index 22234a1..db6f387 100644
--- a/src/net/sf/launch4j/ant/Launch4jTask.java
+++ b/src/net/sf/launch4j/ant/Launch4jTask.java
@@ -40,7 +40,6 @@ import java.io.File;
 
 import net.sf.launch4j.Builder;
 import net.sf.launch4j.BuilderException;
-import net.sf.launch4j.Log;
 import net.sf.launch4j.config.Config;
 import net.sf.launch4j.config.ConfigPersister;
 import net.sf.launch4j.config.ConfigPersisterException;
@@ -107,7 +106,7 @@ public class Launch4jTask extends Task {
 				throw new BuildException(
 						Messages.getString("Launch4jTask.specify.config"));
 			}
-			final Builder b = new Builder(Log.getAntLog());
+			final Builder b = new Builder(null);
 			b.build();
 		} catch (ConfigPersisterException e) {
 			throw new BuildException(e);
diff --git a/src/net/sf/launch4j/formimpl/MainFrame.java b/src/net/sf/launch4j/formimpl/MainFrame.java
index ed30525..667adcb 100644
--- a/src/net/sf/launch4j/formimpl/MainFrame.java
+++ b/src/net/sf/launch4j/formimpl/MainFrame.java
@@ -56,13 +56,14 @@ import javax.swing.SwingWorker;
 import javax.swing.UIManager;
 
 import com.formdev.flatlaf.FlatLightLaf;
+import lombok.extern.slf4j.Slf4j;
 
 import net.sf.launch4j.Builder;
 import net.sf.launch4j.BuilderException;
 import net.sf.launch4j.ExecException;
 import net.sf.launch4j.FileChooserFilter;
-import net.sf.launch4j.Log;
 import net.sf.launch4j.Main;
+import net.sf.launch4j.SwingLogUtils;
 import net.sf.launch4j.Util;
 import net.sf.launch4j.binding.Binding;
 import net.sf.launch4j.binding.BindingException;
@@ -73,6 +74,7 @@ import net.sf.launch4j.config.ConfigPersisterException;
 /**
  * @author Copyright (C) 2022 Grzegorz Kowal
  */
+@Slf4j
 public class MainFrame extends JFrame {
 	private static MainFrame _instance;
 
@@ -126,6 +128,8 @@ public class MainFrame extends JFrame {
 				new AboutActionListener());
 
 		_configForm = new ConfigFormImpl();
+		SwingLogUtils.setTextArea(_configForm.getLogTextArea());
+		
 		getContentPane().setLayout(new BorderLayout());
 		getContentPane().add(_toolBar, BorderLayout.NORTH);
 		getContentPane().add(_configForm, BorderLayout.CENTER);
@@ -283,15 +287,14 @@ public class MainFrame extends JFrame {
 	
 	private class BuildActionListener implements ActionListener {
 		public void actionPerformed(ActionEvent e) {
-			final Log log = Log.getSwingLog(_configForm.getLogTextArea());
 			try {
 				if ((!_saved || _configForm.isModified())
 						&& !save()) {
 					return;
 				}
-				log.clear();
+				//log.clear();
 				ConfigPersister.getInstance().getConfig().checkInvariants();
-				Builder b = new Builder(log);
+				Builder b = new Builder(null);
 				_outfile = b.build();
 				setRunEnabled(ConfigPersister.getInstance().getConfig().isGuiApplication()
 						// TODO fix console app test
@@ -303,7 +306,7 @@ public class MainFrame extends JFrame {
 				warn(ex);
 			} catch (BuilderException ex) {
 				setRunEnabled(false);
-				log.append(ex.getMessage());
+				log.error(ex.getMessage());
 			}
 		}
 	}
@@ -313,22 +316,21 @@ public class MainFrame extends JFrame {
 			try {
 				getGlassPane().setVisible(true);
 				new SwingWorker<Boolean, Boolean>() {
-		            @Override
-		            protected Boolean doInBackground() throws ExecException
-		            {
-		            	Log log = Log.getSwingLog(_configForm.getLogTextArea());
-						log.clear();
+					@Override
+					protected Boolean doInBackground() throws ExecException
+					{
+						//log.clear();
 						String path = _outfile.getPath();
 						if (Util.WINDOWS_OS) {
-							log.append(Messages.getString("MainFrame.executing") + path);
-							Util.exec(new String[] { path, "--l4j-debug" }, log);
+							log.info(Messages.getString("MainFrame.executing") + path);
+							Util.exec(new String[] { path, "--l4j-debug" }, null);
 						} else {
-							log.append(Messages.getString("MainFrame.jar.integrity.test")
+							log.info(Messages.getString("MainFrame.jar.integrity.test")
 									+ path);
-							Util.exec(new String[] { "java", "-jar", path }, log);
+							Util.exec(new String[] { "java", "-jar", path }, null);
 						}
-		            	return true;
-		            }
+						return true;
+					}
 				}.execute();
 			} catch (Exception ex) {
 				// XXX errors logged by exec
-- 
2.33.0.windows.2

